/**
 * üß™ SCRIPT DE TESTING PARA EL SISTEMA MEJORADO
 * 
 * Ejecutar en el navegador despu√©s de cargar la aplicaci√≥n:
 * 1. Abrir aplicaci√≥n en http://localhost:5173
 * 2. Abrir DevTools (F12) 
 * 3. Copiar y pegar este c√≥digo en la consola
 * 4. Ejecutar: runAllTests()
 */

// Casos de prueba m√©dicos reales
const TEST_CASES = [
  // Neurol√≥gicos - NIHSS/Stroke
  {
    text: "Paciente de 65 a√±os presenta hemiparesia izquierda de inicio s√∫bito hace 2 horas, acompa√±ado de disartria y desviaci√≥n de la mirada hacia la derecha. Glasgow 14/15.",
    expected: ['nihss', 'glasgow', 'mrs'],
    description: "Stroke agudo t√≠pico"
  },
  
  // Parkinson
  {
    text: "Hombre de 70 a√±os con temblor de reposo en mano derecha, rigidez en rueda dentada y bradicinesia bilateral. Inicio gradual hace 3 a√±os.",
    expected: ['parkinson_diagnosis', 'updrs3', 'hoehn_yahr'],
    description: "Parkinson cl√°sico"
  },
  
  // Psiqui√°trico - Depresi√≥n
  {
    text: "Paciente refiere tristeza persistente, p√©rdida total de inter√©s en actividades, insomnio terminal, fatiga extrema y pensamientos suicidas recurrentes. S√≠ntomas desde hace 6 semanas.",
    expected: ['major_depressive_disorder', 'beck_depression_inventory'],
    description: "Trastorno depresivo mayor severo"
  },
  
  // Cognitivo
  {
    text: "Mujer de 78 a√±os con deterioro progresivo de la memoria epis√≥dica, desorientaci√≥n temporal y espacial, dificultades en actividades instrumentales de la vida diaria.",
    expected: ['mmse', 'moca'],
    description: "Deterioro cognitivo - posible demencia"
  },
  
  // Neuropsiqui√°trico en demencia
  {
    text: "Paciente con demencia presenta agitaci√≥n nocturna, alucinaciones visuales, comportamientos repetitivos y agresi√≥n verbal hacia cuidadores.",
    expected: ['neuropsychiatric_inventory'],
    description: "S√≠ntomas neuropsiqui√°tricos en demencia"
  },
  
  // Cardiovascular
  {
    text: "Paciente con fibrilaci√≥n auricular, hipertensi√≥n no controlada, diabetes tipo 2 y antecedente de ACV isqu√©mico hace 1 a√±o. Requiere evaluaci√≥n para anticoagulaci√≥n.",
    expected: ['cha2ds2vasc', 'hasbled'],
    description: "Fibrilaci√≥n auricular - riesgo emb√≥lico"
  },
  
  // Cefalea/Migra√±a
  {
    text: "Mujer de 35 a√±os con cefaleas recurrentes que interfieren significativamente con el trabajo, perdiendo 8 d√≠as laborales el mes pasado por episodios severos.",
    expected: ['midas', 'hit6'],
    description: "Migra√±a discapacitante"
  },
  
  // Caso con negaciones (debe reducir confianza)
  {
    text: "Paciente niega temblor, sin rigidez muscular, ausencia de bradicinesia. Movimientos normales y sim√©tricos.",
    expected: [], // No deber√≠a sugerir Parkinson
    description: "Negaciones - no Parkinson"
  },
  
  // Esclerosis M√∫ltiple
  {
    text: "Paciente joven con brotes neurol√≥gicos recurrentes, lesiones desmielinizantes en resonancia magn√©tica, bandas oligoclonales positivas en LCR.",
    expected: ['mcdonald_2024', 'edss'],
    description: "Esclerosis m√∫ltiple"
  },
  
  // Hemorragia intracerebral
  {
    text: "Var√≥n de 55 a√±os con cefalea s√∫bita thunderclap, deterioro del nivel de conciencia (Glasgow 8), hematoma cerebeloso de 40ml con extensi√≥n intraventricular.",
    expected: ['ich_score', 'glasgow'],
    description: "Hemorragia intracerebral"
  }
];

/**
 * Ejecuta todos los tests autom√°ticamente
 */
function runAllTests() {
  console.log('\nüß™ ===============================');
  console.log('üß™ TESTING SISTEMA MEJORADO DE IA');
  console.log('üß™ ===============================\n');
  
  let totalTests = TEST_CASES.length;
  let passedTests = 0;
  let failedTests = [];
  
  // Importar la funci√≥n de an√°lisis
  if (typeof analyzeTextEnhanced === 'undefined') {
    console.error('‚ùå ERROR: analyzeTextEnhanced no est√° disponible. Aseg√∫rate de que la aplicaci√≥n est√© cargada.');
    return;
  }
  
  TEST_CASES.forEach((testCase, index) => {
    console.log(`\nüìù Test ${index + 1}/${totalTests}: ${testCase.description}`);
    console.log(`üìÑ Texto: "${testCase.text.substring(0, 100)}..."`);
    console.log(`üéØ Esperado: [${testCase.expected.join(', ')}]`);
    
    // Ejecutar an√°lisis
    const result = analyzeTextEnhanced(testCase.text);
    const foundScales = result.suggestions.map(s => s.scaleId);
    
    console.log(`üîç Encontrado: [${foundScales.join(', ')}]`);
    
    // Evaluar resultado
    let testPassed = true;
    let details = [];
    
    // Si espera escalas espec√≠ficas
    if (testCase.expected.length > 0) {
      const missingScales = testCase.expected.filter(scale => !foundScales.includes(scale));
      const extraScales = foundScales.filter(scale => !testCase.expected.includes(scale));
      
      if (missingScales.length > 0) {
        testPassed = false;
        details.push(`Faltan: ${missingScales.join(', ')}`);
      }
      
      // Solo marcar como fallo si hay muchas escalas extra irrelevantes
      if (extraScales.length > 3) {
        details.push(`Extras: ${extraScales.join(', ')}`);
      }
      
      // Evaluar confianza de escalas esperadas
      const confidenceInfo = testCase.expected.map(scale => {
        const suggestion = result.suggestions.find(s => s.scaleId === scale);
        return suggestion ? `${scale}: ${(suggestion.confidence * 100).toFixed(1)}%` : `${scale}: NO DETECTADO`;
      });
      
      console.log(`üìä Confianzas: ${confidenceInfo.join(', ')}`);
      
    } else {
      // Caso de negaci√≥n - no deber√≠a sugerir nada relevante
      if (foundScales.length > 2) {
        testPassed = false;
        details.push(`Demasiadas sugerencias para caso de negaci√≥n`);
      }
    }
    
    if (testPassed) {
      console.log(`‚úÖ PAS√ì`);
      passedTests++;
    } else {
      console.log(`‚ùå FALL√ì: ${details.join(', ')}`);
      failedTests.push({
        index: index + 1,
        description: testCase.description,
        details: details
      });
    }
  });
  
  // Resumen final
  console.log('\nüìà ===============================');
  console.log(`üìà RESUMEN DE RESULTADOS`);
  console.log('üìà ===============================');
  console.log(`‚úÖ Tests exitosos: ${passedTests}/${totalTests} (${Math.round(passedTests/totalTests * 100)}%)`);
  console.log(`‚ùå Tests fallidos: ${failedTests.length}/${totalTests}`);
  
  if (failedTests.length > 0) {
    console.log('\n‚ùå DETALLES DE FALLOS:');
    failedTests.forEach(failure => {
      console.log(`   ${failure.index}. ${failure.description}: ${failure.details.join(', ')}`);
    });
  }
  
  // Evaluaci√≥n del sistema
  const successRate = passedTests / totalTests;
  if (successRate >= 0.8) {
    console.log('\nüéâ SISTEMA FUNCIONANDO CORRECTAMENTE (‚â•80% √©xito)');
  } else if (successRate >= 0.6) {
    console.log('\n‚ö†Ô∏è  SISTEMA NECESITA AJUSTES MENORES (60-80% √©xito)');
  } else {
    console.log('\nüö® SISTEMA NECESITA REVISI√ìN MAYOR (<60% √©xito)');
  }
  
  return {
    total: totalTests,
    passed: passedTests,
    failed: failedTests.length,
    successRate: successRate,
    details: failedTests
  };
}

/**
 * Test individual para debugging
 */
function testSingle(text, expectedScales = []) {
  console.log('\nüî¨ TEST INDIVIDUAL:');
  console.log(`üìÑ Texto: "${text}"`);
  
  if (typeof analyzeTextEnhanced === 'undefined') {
    console.error('‚ùå ERROR: analyzeTextEnhanced no est√° disponible.');
    return;
  }
  
  const result = analyzeTextEnhanced(text);
  console.log(`üîç Sugerencias encontradas: ${result.suggestions.length}`);
  
  result.suggestions.forEach((suggestion, index) => {
    console.log(`   ${index + 1}. ${suggestion.scaleId}: ${(suggestion.confidence * 100).toFixed(1)}% (${suggestion.reason})`);
    console.log(`      Keywords: ${suggestion.keywords.slice(0, 5).join(', ')}`);
  });
  
  if (expectedScales.length > 0) {
    const found = result.suggestions.map(s => s.scaleId);
    const missing = expectedScales.filter(scale => !found.includes(scale));
    
    if (missing.length === 0) {
      console.log('‚úÖ Todas las escalas esperadas fueron detectadas');
    } else {
      console.log(`‚ùå Escalas faltantes: ${missing.join(', ')}`);
    }
  }
  
  return result;
}

/**
 * Ver todos los patrones generados autom√°ticamente
 */
function showPatterns() {
  console.log('\nüîç PATRONES AUTO-GENERADOS:');
  
  if (typeof debugPatterns === 'undefined') {
    console.error('‚ùå ERROR: debugPatterns no est√° disponible.');
    return;
  }
  
  return debugPatterns();
}

// Instrucciones de uso
console.log('\nü§ñ SISTEMA DE TESTING CARGADO');
console.log('üìã Comandos disponibles:');
console.log('   runAllTests()     - Ejecuta todos los tests');
console.log('   testSingle(text)  - Test individual');
console.log('   showPatterns()    - Ver patrones generados');
console.log('\nüí° Ejemplo: testSingle("Paciente con temblor y rigidez", ["parkinson_diagnosis"])');

// Auto-ejecutar si se desea
// runAllTests(); // Descomenta para ejecutar autom√°ticamente